{"version":3,"file":"index.mjs","sources":["../lib/quarter_of_year.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert-is-date-object' );\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert-is-integer' ).isPrimitive;\nvar lowercase = require( '@stdlib/string-lowercase' );\nvar format = require( '@stdlib/string-format' );\nvar QUARTERS = require( './quarters.json' );\n\n\n// MAIN //\n\n/**\n* Returns the quarter of the year.\n*\n* @param {(integer|string|Date)} [month] - month (or `Date`)\n* @throws {TypeError} must provide either a string, integer, or `Date` object\n* @throws {Error} must provide a recognized month\n* @throws {RangeError} an integer month argument must be on the interval `[1,12]`\n* @returns {integer} quarter of the year\n*\n* @example\n* var q = quarterOfYear( new Date() );\n* // returns <number>\n*\n* @example\n* var q = quarterOfYear( 4 );\n* // returns 2\n*\n* @example\n* var q = quarterOfYear( 'June' );\n* // returns 2\n*/\nfunction quarterOfYear( month ) {\n\tvar mon;\n\tvar q;\n\tif ( arguments.length ) {\n\t\tif ( isDateObject( month ) ) {\n\t\t\tmon = month.getMonth() + 1; // zero-based\n\t\t} else if ( isString( month ) || isInteger( month ) ) {\n\t\t\tmon = month;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide either a string, integer, or `Date` object. Value: `%s`.', month ) );\n\t\t}\n\t} else {\n\t\t// Note: cannot cache as application may cross over into a new year:\n\t\tmon = ( new Date() ).getMonth() + 1; // zero-based\n\t}\n\tif ( isInteger( mon ) && (mon < 1 || mon > 12) ) {\n\t\tthrow new RangeError( format( 'invalid argument. An integer month value must be on the interval `[1,12]`. Value: `%s`.', mon ) );\n\t}\n\tmon = lowercase( mon.toString() );\n\tq = QUARTERS[ mon ];\n\tif ( q === void 0 ) {\n\t\tthrow new Error( format( 'invalid argument. Must provide a recognized month. Value: `%s`.', month ) );\n\t}\n\treturn q;\n}\n\n\n// EXPORTS //\n\nmodule.exports = quarterOfYear;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the quarter of the year.\n*\n* @module @stdlib/time-quarter-of-year\n*\n* @example\n* var quarterOfYear = require( '@stdlib/time-quarter-of-year' );\n*\n* var q = quarterOfYear( new Date() );\n* // returns <number>\n*\n* q = quarterOfYear( 4 );\n* // returns 2\n*\n* q = quarterOfYear( 'June' );\n* // returns 2\n*/\n\n// MODULES //\n\nvar quarterOfYear = require( './quarter_of_year.js' );\n\n\n// EXPORTS //\n\nmodule.exports = quarterOfYear;\n"],"names":["isDateObject","require$$0","isString","require$$1","isPrimitive","isInteger","require$$2","lowercase","require$$3","format","require$$4","QUARTERS","require$$5","lib","month","mon","q","arguments","length","getMonth","TypeError","Date","RangeError","toString","Error"],"mappings":";;kpBAsBIA,EAAeC,EACfC,EAAWC,EAAsCC,YACjDC,EAAYC,EAAuCF,YACnDG,EAAYC,EACZC,EAASC,EACTC,EAAWC,EAuDf,ICrCAC,EDQA,SAAwBC,GACvB,IAAIC,EACAC,EACJ,GAAKC,UAAUC,OACd,GAAKlB,EAAcc,GAClBC,EAAMD,EAAMK,WAAa,MACnB,CAAA,IAAKjB,EAAUY,KAAWT,EAAWS,GAG3C,MAAM,IAAIM,UAAWX,EAAQ,0FAA2FK,IAFxHC,EAAMD,OAMPC,GAAM,IAAMM,MAASF,WAAa,EAEnC,GAAKd,EAAWU,KAAUA,EAAM,GAAKA,EAAM,IAC1C,MAAM,IAAIO,WAAYb,EAAQ,0FAA2FM,IAI1H,GAFAA,EAAMR,EAAWQ,EAAIQ,iBAEV,KADXP,EAAIL,EAAUI,IAEb,MAAM,IAAIS,MAAOf,EAAQ,kEAAmEK,IAE7F,OAAOE"}