{"version":3,"file":"index.mjs","sources":["../lib/quarter_of_year.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isDateObject from '@stdlib/assert-is-date-object' ;\nimport { isPrimitive as isString } from '@stdlib/assert-is-string' ;\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer' ;\nimport lowercase from '@stdlib/string-lowercase' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\nimport QUARTERS from './quarters.json' ;\n\n\n// MAIN //\n\n/**\n* Returns the quarter of the year.\n*\n* @param {(integer|string|Date)} [month] - month (or `Date`)\n* @throws {TypeError} must provide either a string, integer, or `Date` object\n* @throws {Error} must provide a recognized month\n* @throws {RangeError} an integer month argument must be on the interval `[1,12]`\n* @returns {integer} quarter of the year\n*\n* @example\n* var q = quarterOfYear( new Date() );\n* // returns <number>\n*\n* @example\n* var q = quarterOfYear( 4 );\n* // returns 2\n*\n* @example\n* var q = quarterOfYear( 'June' );\n* // returns 2\n*/\nfunction quarterOfYear( month ) {\n\tvar mon;\n\tvar q;\n\tif ( arguments.length ) {\n\t\tif ( isDateObject( month ) ) {\n\t\t\tmon = month.getMonth() + 1; // zero-based\n\t\t} else if ( isString( month ) || isInteger( month ) ) {\n\t\t\tmon = month;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide either a string, integer, or Date object. Value: `%s`.', month ) );\n\t\t}\n\t} else {\n\t\t// Note: cannot cache as application may cross over into a new year:\n\t\tmon = ( new Date() ).getMonth() + 1; // zero-based\n\t}\n\tif ( isInteger( mon ) && (mon < 1 || mon > 12) ) {\n\t\tthrow new RangeError( format( 'invalid argument. An integer month value must be on the interval: [1, 12]. Value: `%s`.', mon ) );\n\t}\n\tmon = lowercase( mon.toString() );\n\tq = QUARTERS[ mon ];\n\tif ( q === void 0 ) {\n\t\tthrow new Error( format( '0i5BJ', month ) );\n\t}\n\treturn q;\n}\n\n\n// EXPORTS //\n\nexport default quarterOfYear;\n"],"names":["quarterOfYear","month","mon","q","arguments","length","isDateObject","getMonth","isString","isInteger","TypeError","format","Date","RangeError","lowercase","toString","QUARTERS","Error"],"mappings":";;gsBAqDA,SAASA,EAAeC,GACvB,IAAIC,EACAC,EACJ,GAAKC,UAAUC,OACd,GAAKC,EAAcL,GAClBC,EAAMD,EAAMM,WAAa,MACnB,KAAKC,EAAUP,KAAWQ,EAAWR,GAG3C,MAAM,IAAIS,UAAWC,EAAQ,wFAAyFV,IAFtHC,EAAMD,OAMPC,GAAM,IAAMU,MAASL,WAAa,EAEnC,GAAKE,EAAWP,KAAUA,EAAM,GAAKA,EAAM,IAC1C,MAAM,IAAIW,WAAYF,EAAQ,0FAA2FT,IAI1H,GAFAA,EAAMY,EAAWZ,EAAIa,iBAEV,KADXZ,EAAIa,EAAUd,IAEb,MAAM,IAAIe,MAAON,EAAQ,QAASV,IAEnC,OAAOE"}